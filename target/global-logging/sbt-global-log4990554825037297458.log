[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\amkch\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\amkch\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[info] Updated file C:\Users\amkch\IdeaProjects\StrategyGame\project\build.properties: set sbt.version to 1.6.2
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Eclipse Adoptium Java 11.0.17)
[debug]       Load.loadUnit: plugins took 85.6765ms
[debug]       Load.loadUnit: defsScala took 0.3096ms
[debug] [Loading] Scanning directory C:\Users\amkch\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\amkch\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.5427 ms
[debug]           Load.resolveProject(global-plugins) took 33.8201ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\amkch\.sbt\1.0\plugins, plugins: List(<none>))) took 67.686ms
[debug] [Loading] Done in C:\Users\amkch\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 86.0603ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1889ms
[debug]     Load.loadUnit(file:/C:/Users/amkch/.sbt/1.0/plugins/, ...) took 181.8499ms
[debug]   Load.apply: load took 312.773ms
[debug]   Load.apply: resolveProjects took 4.4525ms
[debug]   Load.apply: finalTransforms took 55.0408ms
[debug]   Load.apply: config.delegates took 14.9763ms
[debug]   Load.apply: Def.make(settings)... took 547.5477ms
[debug]   Load.apply: structureIndex took 143.1444ms
[debug]   Load.apply: mkStreams took 6.3711ms
[info] loading global plugins from C:\Users\amkch\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2974.9771ms
[debug]           Load.loadUnit: plugins took 19.2378ms
[debug]           Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory C:\Users\amkch\IdeaProjects\StrategyGame\project
[debug]             Load.loadUnit: mkEval took 5.4537ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\amkch\IdeaProjects\StrategyGame\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.2346 ms
[info] loading settings for project strategygame-build from idea.sbt ...
[debug]               Load.resolveProject(strategygame-build) took 3.0792ms
[debug]             Load.loadTransitive: finalizeProject(Project(id strategygame-build, base: C:\Users\amkch\IdeaProjects\StrategyGame\project, plugins: List(<none>))) took 4.7267ms
[debug] [Loading] Done in C:\Users\amkch\IdeaProjects\StrategyGame\project, returning: (strategygame-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2211.4675ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.7769ms
[debug]         Load.loadUnit(file:/C:/Users/amkch/IdeaProjects/StrategyGame/project/, ...) took 2234.1859ms
[debug]       Load.apply: load took 2235.0163ms
[debug]       Load.apply: resolveProjects took 0.0937ms
[debug]       Load.apply: finalTransforms took 5.0787ms
[debug]       Load.apply: config.delegates took 0.3137ms
[debug]       Load.apply: Def.make(settings)... took 55.0465ms
[debug]       Load.apply: structureIndex took 19.3917ms
[debug]       Load.apply: mkStreams took 0.0035ms
[info] loading project definition from C:\Users\amkch\IdeaProjects\StrategyGame\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4805.9593ms
[debug]     Load.loadUnit: defsScala took 0.0037ms
[debug] [Loading] Scanning directory C:\Users\amkch\IdeaProjects\StrategyGame
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\amkch\IdeaProjects\StrategyGame, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.442 ms
[debug]         Load.resolveProject(strategygame) took 30.889ms
[debug]       Load.loadTransitive: finalizeProject(Project(id strategygame, base: C:\Users\amkch\IdeaProjects\StrategyGame, plugins: List(<none>))) took 33.5232ms
[debug] [Loading] Done in C:\Users\amkch\IdeaProjects\StrategyGame, returning: (strategygame)
[debug]     Load.loadUnit: loadedProjectsRaw took 34.6579ms
[debug]     Load.loadUnit: cleanEvalClasses took 0.0098ms
[debug]   Load.loadUnit(file:/C:/Users/amkch/IdeaProjects/StrategyGame/, ...) took 4841.1588ms
[debug] Load.apply: load took 4842.4247ms
[debug] Load.apply: resolveProjects took 0.1186ms
[debug] Load.apply: finalTransforms took 21.4019ms
[debug] Load.apply: config.delegates took 0.2538ms
[debug] Load.apply: Def.make(settings)... took 54.694ms
[debug] Load.apply: structureIndex took 28.8422ms
[debug] Load.apply: mkStreams took 0.0036ms
[info] set current project to strategygame (in build file:/C:/Users/amkch/IdeaProjects/StrategyGame/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57317 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57317, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to strategygame (in build file:/C:/Users/amkch/IdeaProjects/StrategyGame/)
[debug] > Exec(idea-shell, None, None)
